// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto_INCLUDED
#define PROTOBUF_test_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsReply_ambr_tImpl();
void InitDefaultsReply_ambr_t();
void InitDefaultsReplyImpl();
void InitDefaultsReply();
inline void InitDefaults() {
  InitDefaultsRequest();
  InitDefaultsReply_ambr_t();
  InitDefaultsReply();
}
}  // namespace protobuf_test_2eproto
namespace test {
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Reply_ambr_t;
class Reply_ambr_tDefaultTypeInternal;
extern Reply_ambr_tDefaultTypeInternal _Reply_ambr_t_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace test
namespace google {
namespace protobuf {
template<> ::test::Reply* Arena::Create< ::test::Reply>(Arena*);
template<> ::test::Reply_ambr_t* Arena::Create< ::test::Reply_ambr_t>(Arena*);
template<> ::test::Request* Arena::Create< ::test::Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace test {

enum Reply_Base {
  Reply_Base_DIAMETER_SUCCESS = 0,
  Reply_Base_Reply_Base_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_Base_Reply_Base_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_Base_IsValid(int value);
const Reply_Base Reply_Base_Base_MIN = Reply_Base_DIAMETER_SUCCESS;
const Reply_Base Reply_Base_Base_MAX = Reply_Base_DIAMETER_SUCCESS;
const int Reply_Base_Base_ARRAYSIZE = Reply_Base_Base_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_Base_descriptor();
inline const ::std::string& Reply_Base_Name(Reply_Base value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_Base_descriptor(), value);
}
inline bool Reply_Base_Parse(
    const ::std::string& name, Reply_Base* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_Base>(
    Reply_Base_descriptor(), name, value);
}
enum Reply_subscriber_status_t {
  Reply_subscriber_status_t_SS_SERVICE_GRANTED = 0,
  Reply_subscriber_status_t_SS_OPERATOR_DETERMINED_BARRING = 1,
  Reply_subscriber_status_t_SS_MAX = 2,
  Reply_subscriber_status_t_Reply_subscriber_status_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_subscriber_status_t_Reply_subscriber_status_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_subscriber_status_t_IsValid(int value);
const Reply_subscriber_status_t Reply_subscriber_status_t_subscriber_status_t_MIN = Reply_subscriber_status_t_SS_SERVICE_GRANTED;
const Reply_subscriber_status_t Reply_subscriber_status_t_subscriber_status_t_MAX = Reply_subscriber_status_t_SS_MAX;
const int Reply_subscriber_status_t_subscriber_status_t_ARRAYSIZE = Reply_subscriber_status_t_subscriber_status_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_subscriber_status_t_descriptor();
inline const ::std::string& Reply_subscriber_status_t_Name(Reply_subscriber_status_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_subscriber_status_t_descriptor(), value);
}
inline bool Reply_subscriber_status_t_Parse(
    const ::std::string& name, Reply_subscriber_status_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_subscriber_status_t>(
    Reply_subscriber_status_t_descriptor(), name, value);
}
enum Reply_access_mode_t {
  Reply_access_mode_t_NAM_PACKET_AND_CIRCUIT = 0,
  Reply_access_mode_t_NAM_RESERVED = 1,
  Reply_access_mode_t_NAM_ONLY_PACKET = 2,
  Reply_access_mode_t_NAM_MAX = 3,
  Reply_access_mode_t_Reply_access_mode_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_access_mode_t_Reply_access_mode_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_access_mode_t_IsValid(int value);
const Reply_access_mode_t Reply_access_mode_t_access_mode_t_MIN = Reply_access_mode_t_NAM_PACKET_AND_CIRCUIT;
const Reply_access_mode_t Reply_access_mode_t_access_mode_t_MAX = Reply_access_mode_t_NAM_MAX;
const int Reply_access_mode_t_access_mode_t_ARRAYSIZE = Reply_access_mode_t_access_mode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_access_mode_t_descriptor();
inline const ::std::string& Reply_access_mode_t_Name(Reply_access_mode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_access_mode_t_descriptor(), value);
}
inline bool Reply_access_mode_t_Parse(
    const ::std::string& name, Reply_access_mode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_access_mode_t>(
    Reply_access_mode_t_descriptor(), name, value);
}
enum Reply_all_apn_conf_ind_t {
  Reply_all_apn_conf_ind_t_ALL_APN_CONFIGURATIONS_INCLUDED = 0,
  Reply_all_apn_conf_ind_t_MODIFIED_ADDED_APN_CONFIGURATIONS_INCLUDED = 1,
  Reply_all_apn_conf_ind_t_ALL_APN_MAX = 2,
  Reply_all_apn_conf_ind_t_Reply_all_apn_conf_ind_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_all_apn_conf_ind_t_Reply_all_apn_conf_ind_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_all_apn_conf_ind_t_IsValid(int value);
const Reply_all_apn_conf_ind_t Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_MIN = Reply_all_apn_conf_ind_t_ALL_APN_CONFIGURATIONS_INCLUDED;
const Reply_all_apn_conf_ind_t Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_MAX = Reply_all_apn_conf_ind_t_ALL_APN_MAX;
const int Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_ARRAYSIZE = Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_all_apn_conf_ind_t_descriptor();
inline const ::std::string& Reply_all_apn_conf_ind_t_Name(Reply_all_apn_conf_ind_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_all_apn_conf_ind_t_descriptor(), value);
}
inline bool Reply_all_apn_conf_ind_t_Parse(
    const ::std::string& name, Reply_all_apn_conf_ind_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_all_apn_conf_ind_t>(
    Reply_all_apn_conf_ind_t_descriptor(), name, value);
}
enum Reply_pdn_type_t {
  Reply_pdn_type_t_IPv4 = 0,
  Reply_pdn_type_t_IPv6 = 1,
  Reply_pdn_type_t_IPv4_AND_v6 = 2,
  Reply_pdn_type_t_IPv4_OR_v6 = 3,
  Reply_pdn_type_t_IP_MAX = 4,
  Reply_pdn_type_t_Reply_pdn_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_pdn_type_t_Reply_pdn_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_pdn_type_t_IsValid(int value);
const Reply_pdn_type_t Reply_pdn_type_t_pdn_type_t_MIN = Reply_pdn_type_t_IPv4;
const Reply_pdn_type_t Reply_pdn_type_t_pdn_type_t_MAX = Reply_pdn_type_t_IP_MAX;
const int Reply_pdn_type_t_pdn_type_t_ARRAYSIZE = Reply_pdn_type_t_pdn_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_pdn_type_t_descriptor();
inline const ::std::string& Reply_pdn_type_t_Name(Reply_pdn_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_pdn_type_t_descriptor(), value);
}
inline bool Reply_pdn_type_t_Parse(
    const ::std::string& name, Reply_pdn_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_pdn_type_t>(
    Reply_pdn_type_t_descriptor(), name, value);
}
enum Reply_pre_emption_vulnerability_t {
  Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_ENABLED = 0,
  Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_DISABLED = 1,
  Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_MAX = 2,
  Reply_pre_emption_vulnerability_t_Reply_pre_emption_vulnerability_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_pre_emption_vulnerability_t_Reply_pre_emption_vulnerability_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_pre_emption_vulnerability_t_IsValid(int value);
const Reply_pre_emption_vulnerability_t Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_MIN = Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_ENABLED;
const Reply_pre_emption_vulnerability_t Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_MAX = Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_MAX;
const int Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_ARRAYSIZE = Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_pre_emption_vulnerability_t_descriptor();
inline const ::std::string& Reply_pre_emption_vulnerability_t_Name(Reply_pre_emption_vulnerability_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_pre_emption_vulnerability_t_descriptor(), value);
}
inline bool Reply_pre_emption_vulnerability_t_Parse(
    const ::std::string& name, Reply_pre_emption_vulnerability_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_pre_emption_vulnerability_t>(
    Reply_pre_emption_vulnerability_t_descriptor(), name, value);
}
enum Reply_pre_emption_capability_t {
  Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_ENABLED = 0,
  Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_DISABLED = 1,
  Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_MAX = 2,
  Reply_pre_emption_capability_t_Reply_pre_emption_capability_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reply_pre_emption_capability_t_Reply_pre_emption_capability_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reply_pre_emption_capability_t_IsValid(int value);
const Reply_pre_emption_capability_t Reply_pre_emption_capability_t_pre_emption_capability_t_MIN = Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_ENABLED;
const Reply_pre_emption_capability_t Reply_pre_emption_capability_t_pre_emption_capability_t_MAX = Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_MAX;
const int Reply_pre_emption_capability_t_pre_emption_capability_t_ARRAYSIZE = Reply_pre_emption_capability_t_pre_emption_capability_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_pre_emption_capability_t_descriptor();
inline const ::std::string& Reply_pre_emption_capability_t_Name(Reply_pre_emption_capability_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_pre_emption_capability_t_descriptor(), value);
}
inline bool Reply_pre_emption_capability_t_Parse(
    const ::std::string& name, Reply_pre_emption_capability_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_pre_emption_capability_t>(
    Reply_pre_emption_capability_t_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imsi = 1;
  void clear_imsi();
  static const int kImsiFieldNumber = 1;
  const ::std::string& imsi() const;
  void set_imsi(const ::std::string& value);
  #if LANG_CXX11
  void set_imsi(::std::string&& value);
  #endif
  void set_imsi(const char* value);
  void set_imsi(const char* value, size_t size);
  ::std::string* mutable_imsi();
  ::std::string* release_imsi();
  void set_allocated_imsi(::std::string* imsi);

  // uint32 mcc_digit1 = 2;
  void clear_mcc_digit1();
  static const int kMccDigit1FieldNumber = 2;
  ::google::protobuf::uint32 mcc_digit1() const;
  void set_mcc_digit1(::google::protobuf::uint32 value);

  // uint32 mcc_digit2 = 3;
  void clear_mcc_digit2();
  static const int kMccDigit2FieldNumber = 3;
  ::google::protobuf::uint32 mcc_digit2() const;
  void set_mcc_digit2(::google::protobuf::uint32 value);

  // uint32 mcc_digit3 = 4;
  void clear_mcc_digit3();
  static const int kMccDigit3FieldNumber = 4;
  ::google::protobuf::uint32 mcc_digit3() const;
  void set_mcc_digit3(::google::protobuf::uint32 value);

  // uint32 mnc_digit1 = 5;
  void clear_mnc_digit1();
  static const int kMncDigit1FieldNumber = 5;
  ::google::protobuf::uint32 mnc_digit1() const;
  void set_mnc_digit1(::google::protobuf::uint32 value);

  // uint32 mnc_digit2 = 6;
  void clear_mnc_digit2();
  static const int kMncDigit2FieldNumber = 6;
  ::google::protobuf::uint32 mnc_digit2() const;
  void set_mnc_digit2(::google::protobuf::uint32 value);

  // uint32 mnc_digit3 = 7;
  void clear_mnc_digit3();
  static const int kMncDigit3FieldNumber = 7;
  ::google::protobuf::uint32 mnc_digit3() const;
  void set_mnc_digit3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:test.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imsi_;
  ::google::protobuf::uint32 mcc_digit1_;
  ::google::protobuf::uint32 mcc_digit2_;
  ::google::protobuf::uint32 mcc_digit3_;
  ::google::protobuf::uint32 mnc_digit1_;
  ::google::protobuf::uint32 mnc_digit2_;
  ::google::protobuf::uint32 mnc_digit3_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Reply_ambr_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Reply.ambr_t) */ {
 public:
  Reply_ambr_t();
  virtual ~Reply_ambr_t();

  Reply_ambr_t(const Reply_ambr_t& from);

  inline Reply_ambr_t& operator=(const Reply_ambr_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply_ambr_t(Reply_ambr_t&& from) noexcept
    : Reply_ambr_t() {
    *this = ::std::move(from);
  }

  inline Reply_ambr_t& operator=(Reply_ambr_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_ambr_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply_ambr_t* internal_default_instance() {
    return reinterpret_cast<const Reply_ambr_t*>(
               &_Reply_ambr_t_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Reply_ambr_t* other);
  friend void swap(Reply_ambr_t& a, Reply_ambr_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply_ambr_t* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Reply_ambr_t>(NULL);
  }

  Reply_ambr_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Reply_ambr_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reply_ambr_t& from);
  void MergeFrom(const Reply_ambr_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reply_ambr_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 br_ul = 1;
  void clear_br_ul();
  static const int kBrUlFieldNumber = 1;
  ::google::protobuf::uint64 br_ul() const;
  void set_br_ul(::google::protobuf::uint64 value);

  // uint64 br_dl = 2;
  void clear_br_dl();
  static const int kBrDlFieldNumber = 2;
  ::google::protobuf::uint64 br_dl() const;
  void set_br_dl(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:test.Reply.ambr_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 br_ul_;
  ::google::protobuf::uint64 br_dl_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsReply_ambr_tImpl();
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Reply>(NULL);
  }

  Reply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Reply_ambr_t ambr_t;

  typedef Reply_Base Base;
  static const Base DIAMETER_SUCCESS =
    Reply_Base_DIAMETER_SUCCESS;
  static inline bool Base_IsValid(int value) {
    return Reply_Base_IsValid(value);
  }
  static const Base Base_MIN =
    Reply_Base_Base_MIN;
  static const Base Base_MAX =
    Reply_Base_Base_MAX;
  static const int Base_ARRAYSIZE =
    Reply_Base_Base_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Base_descriptor() {
    return Reply_Base_descriptor();
  }
  static inline const ::std::string& Base_Name(Base value) {
    return Reply_Base_Name(value);
  }
  static inline bool Base_Parse(const ::std::string& name,
      Base* value) {
    return Reply_Base_Parse(name, value);
  }

  typedef Reply_subscriber_status_t subscriber_status_t;
  static const subscriber_status_t SS_SERVICE_GRANTED =
    Reply_subscriber_status_t_SS_SERVICE_GRANTED;
  static const subscriber_status_t SS_OPERATOR_DETERMINED_BARRING =
    Reply_subscriber_status_t_SS_OPERATOR_DETERMINED_BARRING;
  static const subscriber_status_t SS_MAX =
    Reply_subscriber_status_t_SS_MAX;
  static inline bool subscriber_status_t_IsValid(int value) {
    return Reply_subscriber_status_t_IsValid(value);
  }
  static const subscriber_status_t subscriber_status_t_MIN =
    Reply_subscriber_status_t_subscriber_status_t_MIN;
  static const subscriber_status_t subscriber_status_t_MAX =
    Reply_subscriber_status_t_subscriber_status_t_MAX;
  static const int subscriber_status_t_ARRAYSIZE =
    Reply_subscriber_status_t_subscriber_status_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  subscriber_status_t_descriptor() {
    return Reply_subscriber_status_t_descriptor();
  }
  static inline const ::std::string& subscriber_status_t_Name(subscriber_status_t value) {
    return Reply_subscriber_status_t_Name(value);
  }
  static inline bool subscriber_status_t_Parse(const ::std::string& name,
      subscriber_status_t* value) {
    return Reply_subscriber_status_t_Parse(name, value);
  }

  typedef Reply_access_mode_t access_mode_t;
  static const access_mode_t NAM_PACKET_AND_CIRCUIT =
    Reply_access_mode_t_NAM_PACKET_AND_CIRCUIT;
  static const access_mode_t NAM_RESERVED =
    Reply_access_mode_t_NAM_RESERVED;
  static const access_mode_t NAM_ONLY_PACKET =
    Reply_access_mode_t_NAM_ONLY_PACKET;
  static const access_mode_t NAM_MAX =
    Reply_access_mode_t_NAM_MAX;
  static inline bool access_mode_t_IsValid(int value) {
    return Reply_access_mode_t_IsValid(value);
  }
  static const access_mode_t access_mode_t_MIN =
    Reply_access_mode_t_access_mode_t_MIN;
  static const access_mode_t access_mode_t_MAX =
    Reply_access_mode_t_access_mode_t_MAX;
  static const int access_mode_t_ARRAYSIZE =
    Reply_access_mode_t_access_mode_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  access_mode_t_descriptor() {
    return Reply_access_mode_t_descriptor();
  }
  static inline const ::std::string& access_mode_t_Name(access_mode_t value) {
    return Reply_access_mode_t_Name(value);
  }
  static inline bool access_mode_t_Parse(const ::std::string& name,
      access_mode_t* value) {
    return Reply_access_mode_t_Parse(name, value);
  }

  typedef Reply_all_apn_conf_ind_t all_apn_conf_ind_t;
  static const all_apn_conf_ind_t ALL_APN_CONFIGURATIONS_INCLUDED =
    Reply_all_apn_conf_ind_t_ALL_APN_CONFIGURATIONS_INCLUDED;
  static const all_apn_conf_ind_t MODIFIED_ADDED_APN_CONFIGURATIONS_INCLUDED =
    Reply_all_apn_conf_ind_t_MODIFIED_ADDED_APN_CONFIGURATIONS_INCLUDED;
  static const all_apn_conf_ind_t ALL_APN_MAX =
    Reply_all_apn_conf_ind_t_ALL_APN_MAX;
  static inline bool all_apn_conf_ind_t_IsValid(int value) {
    return Reply_all_apn_conf_ind_t_IsValid(value);
  }
  static const all_apn_conf_ind_t all_apn_conf_ind_t_MIN =
    Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_MIN;
  static const all_apn_conf_ind_t all_apn_conf_ind_t_MAX =
    Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_MAX;
  static const int all_apn_conf_ind_t_ARRAYSIZE =
    Reply_all_apn_conf_ind_t_all_apn_conf_ind_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  all_apn_conf_ind_t_descriptor() {
    return Reply_all_apn_conf_ind_t_descriptor();
  }
  static inline const ::std::string& all_apn_conf_ind_t_Name(all_apn_conf_ind_t value) {
    return Reply_all_apn_conf_ind_t_Name(value);
  }
  static inline bool all_apn_conf_ind_t_Parse(const ::std::string& name,
      all_apn_conf_ind_t* value) {
    return Reply_all_apn_conf_ind_t_Parse(name, value);
  }

  typedef Reply_pdn_type_t pdn_type_t;
  static const pdn_type_t IPv4 =
    Reply_pdn_type_t_IPv4;
  static const pdn_type_t IPv6 =
    Reply_pdn_type_t_IPv6;
  static const pdn_type_t IPv4_AND_v6 =
    Reply_pdn_type_t_IPv4_AND_v6;
  static const pdn_type_t IPv4_OR_v6 =
    Reply_pdn_type_t_IPv4_OR_v6;
  static const pdn_type_t IP_MAX =
    Reply_pdn_type_t_IP_MAX;
  static inline bool pdn_type_t_IsValid(int value) {
    return Reply_pdn_type_t_IsValid(value);
  }
  static const pdn_type_t pdn_type_t_MIN =
    Reply_pdn_type_t_pdn_type_t_MIN;
  static const pdn_type_t pdn_type_t_MAX =
    Reply_pdn_type_t_pdn_type_t_MAX;
  static const int pdn_type_t_ARRAYSIZE =
    Reply_pdn_type_t_pdn_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  pdn_type_t_descriptor() {
    return Reply_pdn_type_t_descriptor();
  }
  static inline const ::std::string& pdn_type_t_Name(pdn_type_t value) {
    return Reply_pdn_type_t_Name(value);
  }
  static inline bool pdn_type_t_Parse(const ::std::string& name,
      pdn_type_t* value) {
    return Reply_pdn_type_t_Parse(name, value);
  }

  typedef Reply_pre_emption_vulnerability_t pre_emption_vulnerability_t;
  static const pre_emption_vulnerability_t _PRE_EMPTION_VULNERABILITY_ENABLED =
    Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_ENABLED;
  static const pre_emption_vulnerability_t _PRE_EMPTION_VULNERABILITY_DISABLED =
    Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_DISABLED;
  static const pre_emption_vulnerability_t _PRE_EMPTION_VULNERABILITY_MAX =
    Reply_pre_emption_vulnerability_t__PRE_EMPTION_VULNERABILITY_MAX;
  static inline bool pre_emption_vulnerability_t_IsValid(int value) {
    return Reply_pre_emption_vulnerability_t_IsValid(value);
  }
  static const pre_emption_vulnerability_t pre_emption_vulnerability_t_MIN =
    Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_MIN;
  static const pre_emption_vulnerability_t pre_emption_vulnerability_t_MAX =
    Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_MAX;
  static const int pre_emption_vulnerability_t_ARRAYSIZE =
    Reply_pre_emption_vulnerability_t_pre_emption_vulnerability_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  pre_emption_vulnerability_t_descriptor() {
    return Reply_pre_emption_vulnerability_t_descriptor();
  }
  static inline const ::std::string& pre_emption_vulnerability_t_Name(pre_emption_vulnerability_t value) {
    return Reply_pre_emption_vulnerability_t_Name(value);
  }
  static inline bool pre_emption_vulnerability_t_Parse(const ::std::string& name,
      pre_emption_vulnerability_t* value) {
    return Reply_pre_emption_vulnerability_t_Parse(name, value);
  }

  typedef Reply_pre_emption_capability_t pre_emption_capability_t;
  static const pre_emption_capability_t _PRE_EMPTION_CAPABILITY_ENABLED =
    Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_ENABLED;
  static const pre_emption_capability_t _PRE_EMPTION_CAPABILITY_DISABLED =
    Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_DISABLED;
  static const pre_emption_capability_t _PRE_EMPTION_CAPABILITY_MAX =
    Reply_pre_emption_capability_t__PRE_EMPTION_CAPABILITY_MAX;
  static inline bool pre_emption_capability_t_IsValid(int value) {
    return Reply_pre_emption_capability_t_IsValid(value);
  }
  static const pre_emption_capability_t pre_emption_capability_t_MIN =
    Reply_pre_emption_capability_t_pre_emption_capability_t_MIN;
  static const pre_emption_capability_t pre_emption_capability_t_MAX =
    Reply_pre_emption_capability_t_pre_emption_capability_t_MAX;
  static const int pre_emption_capability_t_ARRAYSIZE =
    Reply_pre_emption_capability_t_pre_emption_capability_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  pre_emption_capability_t_descriptor() {
    return Reply_pre_emption_capability_t_descriptor();
  }
  static inline const ::std::string& pre_emption_capability_t_Name(pre_emption_capability_t value) {
    return Reply_pre_emption_capability_t_Name(value);
  }
  static inline bool pre_emption_capability_t_Parse(const ::std::string& name,
      pre_emption_capability_t* value) {
    return Reply_pre_emption_capability_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string imsi = 3;
  void clear_imsi();
  static const int kImsiFieldNumber = 3;
  const ::std::string& imsi() const;
  void set_imsi(const ::std::string& value);
  #if LANG_CXX11
  void set_imsi(::std::string&& value);
  #endif
  void set_imsi(const char* value);
  void set_imsi(const char* value, size_t size);
  ::std::string* mutable_imsi();
  ::std::string* release_imsi();
  void set_allocated_imsi(::std::string* imsi);

  // bytes msisdn = 7;
  void clear_msisdn();
  static const int kMsisdnFieldNumber = 7;
  const ::std::string& msisdn() const;
  void set_msisdn(const ::std::string& value);
  #if LANG_CXX11
  void set_msisdn(::std::string&& value);
  #endif
  void set_msisdn(const char* value);
  void set_msisdn(const void* value, size_t size);
  ::std::string* mutable_msisdn();
  ::std::string* release_msisdn();
  void set_allocated_msisdn(::std::string* msisdn);

  // string service_selection = 17;
  void clear_service_selection();
  static const int kServiceSelectionFieldNumber = 17;
  const ::std::string& service_selection() const;
  void set_service_selection(const ::std::string& value);
  #if LANG_CXX11
  void set_service_selection(::std::string&& value);
  #endif
  void set_service_selection(const char* value);
  void set_service_selection(const char* value, size_t size);
  ::std::string* mutable_service_selection();
  ::std::string* release_service_selection();
  void set_allocated_service_selection(::std::string* service_selection);

  // .test.Reply.ambr_t subscribed_ambr = 6;
  bool has_subscribed_ambr() const;
  void clear_subscribed_ambr();
  static const int kSubscribedAmbrFieldNumber = 6;
  const ::test::Reply_ambr_t& subscribed_ambr() const;
  ::test::Reply_ambr_t* release_subscribed_ambr();
  ::test::Reply_ambr_t* mutable_subscribed_ambr();
  void set_allocated_subscribed_ambr(::test::Reply_ambr_t* subscribed_ambr);

  // .test.Reply.ambr_t ambr = 23;
  bool has_ambr() const;
  void clear_ambr();
  static const int kAmbrFieldNumber = 23;
  const ::test::Reply_ambr_t& ambr() const;
  ::test::Reply_ambr_t* release_ambr();
  ::test::Reply_ambr_t* mutable_ambr();
  void set_allocated_ambr(::test::Reply_ambr_t* ambr);

  // uint32 present = 1;
  void clear_present();
  static const int kPresentFieldNumber = 1;
  ::google::protobuf::uint32 present() const;
  void set_present(::google::protobuf::uint32 value);

  // .test.Reply.Base base = 2;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  ::test::Reply_Base base() const;
  void set_base(::test::Reply_Base value);

  // .test.Reply.subscriber_status_t subscriber_status = 4;
  void clear_subscriber_status();
  static const int kSubscriberStatusFieldNumber = 4;
  ::test::Reply_subscriber_status_t subscriber_status() const;
  void set_subscriber_status(::test::Reply_subscriber_status_t value);

  // uint32 access_restriction = 5;
  void clear_access_restriction();
  static const int kAccessRestrictionFieldNumber = 5;
  ::google::protobuf::uint32 access_restriction() const;
  void set_access_restriction(::google::protobuf::uint32 value);

  // uint32 msisdn_length = 8;
  void clear_msisdn_length();
  static const int kMsisdnLengthFieldNumber = 8;
  ::google::protobuf::uint32 msisdn_length() const;
  void set_msisdn_length(::google::protobuf::uint32 value);

  // uint32 rau_tau_timer = 9;
  void clear_rau_tau_timer();
  static const int kRauTauTimerFieldNumber = 9;
  ::google::protobuf::uint32 rau_tau_timer() const;
  void set_rau_tau_timer(::google::protobuf::uint32 value);

  // .test.Reply.access_mode_t access_mode = 10;
  void clear_access_mode();
  static const int kAccessModeFieldNumber = 10;
  ::test::Reply_access_mode_t access_mode() const;
  void set_access_mode(::test::Reply_access_mode_t value);

  // uint32 context_identifier = 11;
  void clear_context_identifier();
  static const int kContextIdentifierFieldNumber = 11;
  ::google::protobuf::uint32 context_identifier() const;
  void set_context_identifier(::google::protobuf::uint32 value);

  // .test.Reply.all_apn_conf_ind_t all_apn_conf_ind = 12;
  void clear_all_apn_conf_ind();
  static const int kAllApnConfIndFieldNumber = 12;
  ::test::Reply_all_apn_conf_ind_t all_apn_conf_ind() const;
  void set_all_apn_conf_ind(::test::Reply_all_apn_conf_ind_t value);

  // uint32 nb_apns = 13;
  void clear_nb_apns();
  static const int kNbApnsFieldNumber = 13;
  ::google::protobuf::uint32 nb_apns() const;
  void set_nb_apns(::google::protobuf::uint32 value);

  // uint32 apn_context_identifier = 14;
  void clear_apn_context_identifier();
  static const int kApnContextIdentifierFieldNumber = 14;
  ::google::protobuf::uint32 apn_context_identifier() const;
  void set_apn_context_identifier(::google::protobuf::uint32 value);

  // uint32 nb_ip_address = 15;
  void clear_nb_ip_address();
  static const int kNbIpAddressFieldNumber = 15;
  ::google::protobuf::uint32 nb_ip_address() const;
  void set_nb_ip_address(::google::protobuf::uint32 value);

  // .test.Reply.pdn_type_t pdn_type = 16;
  void clear_pdn_type();
  static const int kPdnTypeFieldNumber = 16;
  ::test::Reply_pdn_type_t pdn_type() const;
  void set_pdn_type(::test::Reply_pdn_type_t value);

  // int32 service_selection_length = 18;
  void clear_service_selection_length();
  static const int kServiceSelectionLengthFieldNumber = 18;
  ::google::protobuf::int32 service_selection_length() const;
  void set_service_selection_length(::google::protobuf::int32 value);

  // uint32 qci = 19;
  void clear_qci();
  static const int kQciFieldNumber = 19;
  ::google::protobuf::uint32 qci() const;
  void set_qci(::google::protobuf::uint32 value);

  // uint32 priority_level = 20;
  void clear_priority_level();
  static const int kPriorityLevelFieldNumber = 20;
  ::google::protobuf::uint32 priority_level() const;
  void set_priority_level(::google::protobuf::uint32 value);

  // .test.Reply.pre_emption_vulnerability_t pre_emp_vulnerability = 21;
  void clear_pre_emp_vulnerability();
  static const int kPreEmpVulnerabilityFieldNumber = 21;
  ::test::Reply_pre_emption_vulnerability_t pre_emp_vulnerability() const;
  void set_pre_emp_vulnerability(::test::Reply_pre_emption_vulnerability_t value);

  // .test.Reply.pre_emption_capability_t pre_emp_capability = 22;
  void clear_pre_emp_capability();
  static const int kPreEmpCapabilityFieldNumber = 22;
  ::test::Reply_pre_emption_capability_t pre_emp_capability() const;
  void set_pre_emp_capability(::test::Reply_pre_emption_capability_t value);

  // @@protoc_insertion_point(class_scope:test.Reply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imsi_;
  ::google::protobuf::internal::ArenaStringPtr msisdn_;
  ::google::protobuf::internal::ArenaStringPtr service_selection_;
  ::test::Reply_ambr_t* subscribed_ambr_;
  ::test::Reply_ambr_t* ambr_;
  ::google::protobuf::uint32 present_;
  int base_;
  int subscriber_status_;
  ::google::protobuf::uint32 access_restriction_;
  ::google::protobuf::uint32 msisdn_length_;
  ::google::protobuf::uint32 rau_tau_timer_;
  int access_mode_;
  ::google::protobuf::uint32 context_identifier_;
  int all_apn_conf_ind_;
  ::google::protobuf::uint32 nb_apns_;
  ::google::protobuf::uint32 apn_context_identifier_;
  ::google::protobuf::uint32 nb_ip_address_;
  int pdn_type_;
  ::google::protobuf::int32 service_selection_length_;
  ::google::protobuf::uint32 qci_;
  ::google::protobuf::uint32 priority_level_;
  int pre_emp_vulnerability_;
  int pre_emp_capability_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string imsi = 1;
inline void Request::clear_imsi() {
  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::imsi() const {
  // @@protoc_insertion_point(field_get:test.Request.imsi)
  return imsi_.GetNoArena();
}
inline void Request::set_imsi(const ::std::string& value) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Request.imsi)
}
#if LANG_CXX11
inline void Request::set_imsi(::std::string&& value) {
  
  imsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Request.imsi)
}
#endif
inline void Request::set_imsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Request.imsi)
}
inline void Request::set_imsi(const char* value, size_t size) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Request.imsi)
}
inline ::std::string* Request::mutable_imsi() {
  
  // @@protoc_insertion_point(field_mutable:test.Request.imsi)
  return imsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_imsi() {
  // @@protoc_insertion_point(field_release:test.Request.imsi)
  
  return imsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_imsi(::std::string* imsi) {
  if (imsi != NULL) {
    
  } else {
    
  }
  imsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imsi);
  // @@protoc_insertion_point(field_set_allocated:test.Request.imsi)
}

// uint32 mcc_digit1 = 2;
inline void Request::clear_mcc_digit1() {
  mcc_digit1_ = 0u;
}
inline ::google::protobuf::uint32 Request::mcc_digit1() const {
  // @@protoc_insertion_point(field_get:test.Request.mcc_digit1)
  return mcc_digit1_;
}
inline void Request::set_mcc_digit1(::google::protobuf::uint32 value) {
  
  mcc_digit1_ = value;
  // @@protoc_insertion_point(field_set:test.Request.mcc_digit1)
}

// uint32 mcc_digit2 = 3;
inline void Request::clear_mcc_digit2() {
  mcc_digit2_ = 0u;
}
inline ::google::protobuf::uint32 Request::mcc_digit2() const {
  // @@protoc_insertion_point(field_get:test.Request.mcc_digit2)
  return mcc_digit2_;
}
inline void Request::set_mcc_digit2(::google::protobuf::uint32 value) {
  
  mcc_digit2_ = value;
  // @@protoc_insertion_point(field_set:test.Request.mcc_digit2)
}

// uint32 mcc_digit3 = 4;
inline void Request::clear_mcc_digit3() {
  mcc_digit3_ = 0u;
}
inline ::google::protobuf::uint32 Request::mcc_digit3() const {
  // @@protoc_insertion_point(field_get:test.Request.mcc_digit3)
  return mcc_digit3_;
}
inline void Request::set_mcc_digit3(::google::protobuf::uint32 value) {
  
  mcc_digit3_ = value;
  // @@protoc_insertion_point(field_set:test.Request.mcc_digit3)
}

// uint32 mnc_digit1 = 5;
inline void Request::clear_mnc_digit1() {
  mnc_digit1_ = 0u;
}
inline ::google::protobuf::uint32 Request::mnc_digit1() const {
  // @@protoc_insertion_point(field_get:test.Request.mnc_digit1)
  return mnc_digit1_;
}
inline void Request::set_mnc_digit1(::google::protobuf::uint32 value) {
  
  mnc_digit1_ = value;
  // @@protoc_insertion_point(field_set:test.Request.mnc_digit1)
}

// uint32 mnc_digit2 = 6;
inline void Request::clear_mnc_digit2() {
  mnc_digit2_ = 0u;
}
inline ::google::protobuf::uint32 Request::mnc_digit2() const {
  // @@protoc_insertion_point(field_get:test.Request.mnc_digit2)
  return mnc_digit2_;
}
inline void Request::set_mnc_digit2(::google::protobuf::uint32 value) {
  
  mnc_digit2_ = value;
  // @@protoc_insertion_point(field_set:test.Request.mnc_digit2)
}

// uint32 mnc_digit3 = 7;
inline void Request::clear_mnc_digit3() {
  mnc_digit3_ = 0u;
}
inline ::google::protobuf::uint32 Request::mnc_digit3() const {
  // @@protoc_insertion_point(field_get:test.Request.mnc_digit3)
  return mnc_digit3_;
}
inline void Request::set_mnc_digit3(::google::protobuf::uint32 value) {
  
  mnc_digit3_ = value;
  // @@protoc_insertion_point(field_set:test.Request.mnc_digit3)
}

// -------------------------------------------------------------------

// Reply_ambr_t

// uint64 br_ul = 1;
inline void Reply_ambr_t::clear_br_ul() {
  br_ul_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Reply_ambr_t::br_ul() const {
  // @@protoc_insertion_point(field_get:test.Reply.ambr_t.br_ul)
  return br_ul_;
}
inline void Reply_ambr_t::set_br_ul(::google::protobuf::uint64 value) {
  
  br_ul_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.ambr_t.br_ul)
}

// uint64 br_dl = 2;
inline void Reply_ambr_t::clear_br_dl() {
  br_dl_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Reply_ambr_t::br_dl() const {
  // @@protoc_insertion_point(field_get:test.Reply.ambr_t.br_dl)
  return br_dl_;
}
inline void Reply_ambr_t::set_br_dl(::google::protobuf::uint64 value) {
  
  br_dl_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.ambr_t.br_dl)
}

// -------------------------------------------------------------------

// Reply

// uint32 present = 1;
inline void Reply::clear_present() {
  present_ = 0u;
}
inline ::google::protobuf::uint32 Reply::present() const {
  // @@protoc_insertion_point(field_get:test.Reply.present)
  return present_;
}
inline void Reply::set_present(::google::protobuf::uint32 value) {
  
  present_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.present)
}

// .test.Reply.Base base = 2;
inline void Reply::clear_base() {
  base_ = 0;
}
inline ::test::Reply_Base Reply::base() const {
  // @@protoc_insertion_point(field_get:test.Reply.base)
  return static_cast< ::test::Reply_Base >(base_);
}
inline void Reply::set_base(::test::Reply_Base value) {
  
  base_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.base)
}

// string imsi = 3;
inline void Reply::clear_imsi() {
  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reply::imsi() const {
  // @@protoc_insertion_point(field_get:test.Reply.imsi)
  return imsi_.GetNoArena();
}
inline void Reply::set_imsi(const ::std::string& value) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Reply.imsi)
}
#if LANG_CXX11
inline void Reply::set_imsi(::std::string&& value) {
  
  imsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Reply.imsi)
}
#endif
inline void Reply::set_imsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Reply.imsi)
}
inline void Reply::set_imsi(const char* value, size_t size) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Reply.imsi)
}
inline ::std::string* Reply::mutable_imsi() {
  
  // @@protoc_insertion_point(field_mutable:test.Reply.imsi)
  return imsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply::release_imsi() {
  // @@protoc_insertion_point(field_release:test.Reply.imsi)
  
  return imsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply::set_allocated_imsi(::std::string* imsi) {
  if (imsi != NULL) {
    
  } else {
    
  }
  imsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imsi);
  // @@protoc_insertion_point(field_set_allocated:test.Reply.imsi)
}

// .test.Reply.subscriber_status_t subscriber_status = 4;
inline void Reply::clear_subscriber_status() {
  subscriber_status_ = 0;
}
inline ::test::Reply_subscriber_status_t Reply::subscriber_status() const {
  // @@protoc_insertion_point(field_get:test.Reply.subscriber_status)
  return static_cast< ::test::Reply_subscriber_status_t >(subscriber_status_);
}
inline void Reply::set_subscriber_status(::test::Reply_subscriber_status_t value) {
  
  subscriber_status_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.subscriber_status)
}

// uint32 access_restriction = 5;
inline void Reply::clear_access_restriction() {
  access_restriction_ = 0u;
}
inline ::google::protobuf::uint32 Reply::access_restriction() const {
  // @@protoc_insertion_point(field_get:test.Reply.access_restriction)
  return access_restriction_;
}
inline void Reply::set_access_restriction(::google::protobuf::uint32 value) {
  
  access_restriction_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.access_restriction)
}

// .test.Reply.ambr_t subscribed_ambr = 6;
inline bool Reply::has_subscribed_ambr() const {
  return this != internal_default_instance() && subscribed_ambr_ != NULL;
}
inline void Reply::clear_subscribed_ambr() {
  if (GetArenaNoVirtual() == NULL && subscribed_ambr_ != NULL) {
    delete subscribed_ambr_;
  }
  subscribed_ambr_ = NULL;
}
inline const ::test::Reply_ambr_t& Reply::subscribed_ambr() const {
  const ::test::Reply_ambr_t* p = subscribed_ambr_;
  // @@protoc_insertion_point(field_get:test.Reply.subscribed_ambr)
  return p != NULL ? *p : *reinterpret_cast<const ::test::Reply_ambr_t*>(
      &::test::_Reply_ambr_t_default_instance_);
}
inline ::test::Reply_ambr_t* Reply::release_subscribed_ambr() {
  // @@protoc_insertion_point(field_release:test.Reply.subscribed_ambr)
  
  ::test::Reply_ambr_t* temp = subscribed_ambr_;
  subscribed_ambr_ = NULL;
  return temp;
}
inline ::test::Reply_ambr_t* Reply::mutable_subscribed_ambr() {
  
  if (subscribed_ambr_ == NULL) {
    subscribed_ambr_ = ::google::protobuf::Arena::Create< ::test::Reply_ambr_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:test.Reply.subscribed_ambr)
  return subscribed_ambr_;
}
inline void Reply::set_allocated_subscribed_ambr(::test::Reply_ambr_t* subscribed_ambr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subscribed_ambr_;
  }
  if (subscribed_ambr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribed_ambr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribed_ambr, submessage_arena);
    }
    
  } else {
    
  }
  subscribed_ambr_ = subscribed_ambr;
  // @@protoc_insertion_point(field_set_allocated:test.Reply.subscribed_ambr)
}

// bytes msisdn = 7;
inline void Reply::clear_msisdn() {
  msisdn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reply::msisdn() const {
  // @@protoc_insertion_point(field_get:test.Reply.msisdn)
  return msisdn_.GetNoArena();
}
inline void Reply::set_msisdn(const ::std::string& value) {
  
  msisdn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Reply.msisdn)
}
#if LANG_CXX11
inline void Reply::set_msisdn(::std::string&& value) {
  
  msisdn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Reply.msisdn)
}
#endif
inline void Reply::set_msisdn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msisdn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Reply.msisdn)
}
inline void Reply::set_msisdn(const void* value, size_t size) {
  
  msisdn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Reply.msisdn)
}
inline ::std::string* Reply::mutable_msisdn() {
  
  // @@protoc_insertion_point(field_mutable:test.Reply.msisdn)
  return msisdn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply::release_msisdn() {
  // @@protoc_insertion_point(field_release:test.Reply.msisdn)
  
  return msisdn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply::set_allocated_msisdn(::std::string* msisdn) {
  if (msisdn != NULL) {
    
  } else {
    
  }
  msisdn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msisdn);
  // @@protoc_insertion_point(field_set_allocated:test.Reply.msisdn)
}

// uint32 msisdn_length = 8;
inline void Reply::clear_msisdn_length() {
  msisdn_length_ = 0u;
}
inline ::google::protobuf::uint32 Reply::msisdn_length() const {
  // @@protoc_insertion_point(field_get:test.Reply.msisdn_length)
  return msisdn_length_;
}
inline void Reply::set_msisdn_length(::google::protobuf::uint32 value) {
  
  msisdn_length_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.msisdn_length)
}

// uint32 rau_tau_timer = 9;
inline void Reply::clear_rau_tau_timer() {
  rau_tau_timer_ = 0u;
}
inline ::google::protobuf::uint32 Reply::rau_tau_timer() const {
  // @@protoc_insertion_point(field_get:test.Reply.rau_tau_timer)
  return rau_tau_timer_;
}
inline void Reply::set_rau_tau_timer(::google::protobuf::uint32 value) {
  
  rau_tau_timer_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.rau_tau_timer)
}

// .test.Reply.access_mode_t access_mode = 10;
inline void Reply::clear_access_mode() {
  access_mode_ = 0;
}
inline ::test::Reply_access_mode_t Reply::access_mode() const {
  // @@protoc_insertion_point(field_get:test.Reply.access_mode)
  return static_cast< ::test::Reply_access_mode_t >(access_mode_);
}
inline void Reply::set_access_mode(::test::Reply_access_mode_t value) {
  
  access_mode_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.access_mode)
}

// uint32 context_identifier = 11;
inline void Reply::clear_context_identifier() {
  context_identifier_ = 0u;
}
inline ::google::protobuf::uint32 Reply::context_identifier() const {
  // @@protoc_insertion_point(field_get:test.Reply.context_identifier)
  return context_identifier_;
}
inline void Reply::set_context_identifier(::google::protobuf::uint32 value) {
  
  context_identifier_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.context_identifier)
}

// .test.Reply.all_apn_conf_ind_t all_apn_conf_ind = 12;
inline void Reply::clear_all_apn_conf_ind() {
  all_apn_conf_ind_ = 0;
}
inline ::test::Reply_all_apn_conf_ind_t Reply::all_apn_conf_ind() const {
  // @@protoc_insertion_point(field_get:test.Reply.all_apn_conf_ind)
  return static_cast< ::test::Reply_all_apn_conf_ind_t >(all_apn_conf_ind_);
}
inline void Reply::set_all_apn_conf_ind(::test::Reply_all_apn_conf_ind_t value) {
  
  all_apn_conf_ind_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.all_apn_conf_ind)
}

// uint32 nb_apns = 13;
inline void Reply::clear_nb_apns() {
  nb_apns_ = 0u;
}
inline ::google::protobuf::uint32 Reply::nb_apns() const {
  // @@protoc_insertion_point(field_get:test.Reply.nb_apns)
  return nb_apns_;
}
inline void Reply::set_nb_apns(::google::protobuf::uint32 value) {
  
  nb_apns_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.nb_apns)
}

// uint32 apn_context_identifier = 14;
inline void Reply::clear_apn_context_identifier() {
  apn_context_identifier_ = 0u;
}
inline ::google::protobuf::uint32 Reply::apn_context_identifier() const {
  // @@protoc_insertion_point(field_get:test.Reply.apn_context_identifier)
  return apn_context_identifier_;
}
inline void Reply::set_apn_context_identifier(::google::protobuf::uint32 value) {
  
  apn_context_identifier_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.apn_context_identifier)
}

// uint32 nb_ip_address = 15;
inline void Reply::clear_nb_ip_address() {
  nb_ip_address_ = 0u;
}
inline ::google::protobuf::uint32 Reply::nb_ip_address() const {
  // @@protoc_insertion_point(field_get:test.Reply.nb_ip_address)
  return nb_ip_address_;
}
inline void Reply::set_nb_ip_address(::google::protobuf::uint32 value) {
  
  nb_ip_address_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.nb_ip_address)
}

// .test.Reply.pdn_type_t pdn_type = 16;
inline void Reply::clear_pdn_type() {
  pdn_type_ = 0;
}
inline ::test::Reply_pdn_type_t Reply::pdn_type() const {
  // @@protoc_insertion_point(field_get:test.Reply.pdn_type)
  return static_cast< ::test::Reply_pdn_type_t >(pdn_type_);
}
inline void Reply::set_pdn_type(::test::Reply_pdn_type_t value) {
  
  pdn_type_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.pdn_type)
}

// string service_selection = 17;
inline void Reply::clear_service_selection() {
  service_selection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reply::service_selection() const {
  // @@protoc_insertion_point(field_get:test.Reply.service_selection)
  return service_selection_.GetNoArena();
}
inline void Reply::set_service_selection(const ::std::string& value) {
  
  service_selection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Reply.service_selection)
}
#if LANG_CXX11
inline void Reply::set_service_selection(::std::string&& value) {
  
  service_selection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Reply.service_selection)
}
#endif
inline void Reply::set_service_selection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_selection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Reply.service_selection)
}
inline void Reply::set_service_selection(const char* value, size_t size) {
  
  service_selection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Reply.service_selection)
}
inline ::std::string* Reply::mutable_service_selection() {
  
  // @@protoc_insertion_point(field_mutable:test.Reply.service_selection)
  return service_selection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply::release_service_selection() {
  // @@protoc_insertion_point(field_release:test.Reply.service_selection)
  
  return service_selection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply::set_allocated_service_selection(::std::string* service_selection) {
  if (service_selection != NULL) {
    
  } else {
    
  }
  service_selection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_selection);
  // @@protoc_insertion_point(field_set_allocated:test.Reply.service_selection)
}

// int32 service_selection_length = 18;
inline void Reply::clear_service_selection_length() {
  service_selection_length_ = 0;
}
inline ::google::protobuf::int32 Reply::service_selection_length() const {
  // @@protoc_insertion_point(field_get:test.Reply.service_selection_length)
  return service_selection_length_;
}
inline void Reply::set_service_selection_length(::google::protobuf::int32 value) {
  
  service_selection_length_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.service_selection_length)
}

// uint32 qci = 19;
inline void Reply::clear_qci() {
  qci_ = 0u;
}
inline ::google::protobuf::uint32 Reply::qci() const {
  // @@protoc_insertion_point(field_get:test.Reply.qci)
  return qci_;
}
inline void Reply::set_qci(::google::protobuf::uint32 value) {
  
  qci_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.qci)
}

// uint32 priority_level = 20;
inline void Reply::clear_priority_level() {
  priority_level_ = 0u;
}
inline ::google::protobuf::uint32 Reply::priority_level() const {
  // @@protoc_insertion_point(field_get:test.Reply.priority_level)
  return priority_level_;
}
inline void Reply::set_priority_level(::google::protobuf::uint32 value) {
  
  priority_level_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.priority_level)
}

// .test.Reply.pre_emption_vulnerability_t pre_emp_vulnerability = 21;
inline void Reply::clear_pre_emp_vulnerability() {
  pre_emp_vulnerability_ = 0;
}
inline ::test::Reply_pre_emption_vulnerability_t Reply::pre_emp_vulnerability() const {
  // @@protoc_insertion_point(field_get:test.Reply.pre_emp_vulnerability)
  return static_cast< ::test::Reply_pre_emption_vulnerability_t >(pre_emp_vulnerability_);
}
inline void Reply::set_pre_emp_vulnerability(::test::Reply_pre_emption_vulnerability_t value) {
  
  pre_emp_vulnerability_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.pre_emp_vulnerability)
}

// .test.Reply.pre_emption_capability_t pre_emp_capability = 22;
inline void Reply::clear_pre_emp_capability() {
  pre_emp_capability_ = 0;
}
inline ::test::Reply_pre_emption_capability_t Reply::pre_emp_capability() const {
  // @@protoc_insertion_point(field_get:test.Reply.pre_emp_capability)
  return static_cast< ::test::Reply_pre_emption_capability_t >(pre_emp_capability_);
}
inline void Reply::set_pre_emp_capability(::test::Reply_pre_emption_capability_t value) {
  
  pre_emp_capability_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.pre_emp_capability)
}

// .test.Reply.ambr_t ambr = 23;
inline bool Reply::has_ambr() const {
  return this != internal_default_instance() && ambr_ != NULL;
}
inline void Reply::clear_ambr() {
  if (GetArenaNoVirtual() == NULL && ambr_ != NULL) {
    delete ambr_;
  }
  ambr_ = NULL;
}
inline const ::test::Reply_ambr_t& Reply::ambr() const {
  const ::test::Reply_ambr_t* p = ambr_;
  // @@protoc_insertion_point(field_get:test.Reply.ambr)
  return p != NULL ? *p : *reinterpret_cast<const ::test::Reply_ambr_t*>(
      &::test::_Reply_ambr_t_default_instance_);
}
inline ::test::Reply_ambr_t* Reply::release_ambr() {
  // @@protoc_insertion_point(field_release:test.Reply.ambr)
  
  ::test::Reply_ambr_t* temp = ambr_;
  ambr_ = NULL;
  return temp;
}
inline ::test::Reply_ambr_t* Reply::mutable_ambr() {
  
  if (ambr_ == NULL) {
    ambr_ = ::google::protobuf::Arena::Create< ::test::Reply_ambr_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:test.Reply.ambr)
  return ambr_;
}
inline void Reply::set_allocated_ambr(::test::Reply_ambr_t* ambr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ambr_;
  }
  if (ambr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ambr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ambr, submessage_arena);
    }
    
  } else {
    
  }
  ambr_ = ambr;
  // @@protoc_insertion_point(field_set_allocated:test.Reply.ambr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::test::Reply_Base> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_Base>() {
  return ::test::Reply_Base_descriptor();
}
template <> struct is_proto_enum< ::test::Reply_subscriber_status_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_subscriber_status_t>() {
  return ::test::Reply_subscriber_status_t_descriptor();
}
template <> struct is_proto_enum< ::test::Reply_access_mode_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_access_mode_t>() {
  return ::test::Reply_access_mode_t_descriptor();
}
template <> struct is_proto_enum< ::test::Reply_all_apn_conf_ind_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_all_apn_conf_ind_t>() {
  return ::test::Reply_all_apn_conf_ind_t_descriptor();
}
template <> struct is_proto_enum< ::test::Reply_pdn_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_pdn_type_t>() {
  return ::test::Reply_pdn_type_t_descriptor();
}
template <> struct is_proto_enum< ::test::Reply_pre_emption_vulnerability_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_pre_emption_vulnerability_t>() {
  return ::test::Reply_pre_emption_vulnerability_t_descriptor();
}
template <> struct is_proto_enum< ::test::Reply_pre_emption_capability_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Reply_pre_emption_capability_t>() {
  return ::test::Reply_pre_emption_capability_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto_INCLUDED
