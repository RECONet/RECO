// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace test {
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class Reply_ambr_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply_ambr_t>
      _instance;
} _Reply_ambr_t_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply>
      _instance;
} _Reply_default_instance_;
}  // namespace test
namespace protobuf_test_2eproto {
void InitDefaultsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::test::_Request_default_instance_;
    new (ptr) ::test::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Request::InitAsDefaultInstance();
}

void InitDefaultsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestImpl);
}

void InitDefaultsReply_ambr_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::test::_Reply_ambr_t_default_instance_;
    new (ptr) ::test::Reply_ambr_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Reply_ambr_t::InitAsDefaultInstance();
}

void InitDefaultsReply_ambr_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReply_ambr_tImpl);
}

void InitDefaultsReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_test_2eproto::InitDefaultsReply_ambr_t();
  {
    void* ptr = &::test::_Reply_default_instance_;
    new (ptr) ::test::Reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Reply::InitAsDefaultInstance();
}

void InitDefaultsReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplyImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, imsi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, mcc_digit1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, mcc_digit2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, mcc_digit3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, mnc_digit1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, mnc_digit2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Request, mnc_digit3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply_ambr_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply_ambr_t, br_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply_ambr_t, br_dl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, imsi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, subscriber_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, access_restriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, subscribed_ambr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, msisdn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, msisdn_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, rau_tau_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, access_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, context_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, all_apn_conf_ind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, nb_apns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, apn_context_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, nb_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, pdn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, service_selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, service_selection_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, qci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, priority_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, pre_emp_vulnerability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, pre_emp_capability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::test::Reply, ambr_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::Request)},
  { 12, -1, sizeof(::test::Reply_ambr_t)},
  { 19, -1, sizeof(::test::Reply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_Reply_ambr_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_Reply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntest.proto\022\004test\"\217\001\n\007Request\022\014\n\004imsi\030\001"
      " \001(\t\022\022\n\nmcc_digit1\030\002 \001(\r\022\022\n\nmcc_digit2\030\003"
      " \001(\r\022\022\n\nmcc_digit3\030\004 \001(\r\022\022\n\nmnc_digit1\030\005"
      " \001(\r\022\022\n\nmnc_digit2\030\006 \001(\r\022\022\n\nmnc_digit3\030\007"
      " \001(\r\"\376\013\n\005Reply\022\017\n\007present\030\001 \001(\r\022\036\n\004base\030"
      "\002 \001(\0162\020.test.Reply.Base\022\014\n\004imsi\030\003 \001(\t\022:\n"
      "\021subscriber_status\030\004 \001(\0162\037.test.Reply.su"
      "bscriber_status_t\022\032\n\022access_restriction\030"
      "\005 \001(\r\022+\n\017subscribed_ambr\030\006 \001(\0132\022.test.Re"
      "ply.ambr_t\022\016\n\006msisdn\030\007 \001(\014\022\025\n\rmsisdn_len"
      "gth\030\010 \001(\r\022\025\n\rrau_tau_timer\030\t \001(\r\022.\n\013acce"
      "ss_mode\030\n \001(\0162\031.test.Reply.access_mode_t"
      "\022\032\n\022context_identifier\030\013 \001(\r\0228\n\020all_apn_"
      "conf_ind\030\014 \001(\0162\036.test.Reply.all_apn_conf"
      "_ind_t\022\017\n\007nb_apns\030\r \001(\r\022\036\n\026apn_context_i"
      "dentifier\030\016 \001(\r\022\025\n\rnb_ip_address\030\017 \001(\r\022("
      "\n\010pdn_type\030\020 \001(\0162\026.test.Reply.pdn_type_t"
      "\022\031\n\021service_selection\030\021 \001(\t\022 \n\030service_s"
      "election_length\030\022 \001(\005\022\013\n\003qci\030\023 \001(\r\022\026\n\016pr"
      "iority_level\030\024 \001(\r\022F\n\025pre_emp_vulnerabil"
      "ity\030\025 \001(\0162\'.test.Reply.pre_emption_vulne"
      "rability_t\022@\n\022pre_emp_capability\030\026 \001(\0162$"
      ".test.Reply.pre_emption_capability_t\022 \n\004"
      "ambr\030\027 \001(\0132\022.test.Reply.ambr_t\032&\n\006ambr_t"
      "\022\r\n\005br_ul\030\001 \001(\004\022\r\n\005br_dl\030\002 \001(\004\"\034\n\004Base\022\024"
      "\n\020DIAMETER_SUCCESS\020\000\"]\n\023subscriber_statu"
      "s_t\022\026\n\022SS_SERVICE_GRANTED\020\000\022\"\n\036SS_OPERAT"
      "OR_DETERMINED_BARRING\020\001\022\n\n\006SS_MAX\020\002\"_\n\ra"
      "ccess_mode_t\022\032\n\026NAM_PACKET_AND_CIRCUIT\020\000"
      "\022\020\n\014NAM_RESERVED\020\001\022\023\n\017NAM_ONLY_PACKET\020\002\022"
      "\013\n\007NAM_MAX\020\003\"z\n\022all_apn_conf_ind_t\022#\n\037AL"
      "L_APN_CONFIGURATIONS_INCLUDED\020\000\022.\n*MODIF"
      "IED_ADDED_APN_CONFIGURATIONS_INCLUDED\020\001\022"
      "\017\n\013ALL_APN_MAX\020\002\"M\n\npdn_type_t\022\010\n\004IPv4\020\000"
      "\022\010\n\004IPv6\020\001\022\017\n\013IPv4_AND_v6\020\002\022\016\n\nIPv4_OR_v"
      "6\020\003\022\n\n\006IP_MAX\020\004\"\222\001\n\033pre_emption_vulnerab"
      "ility_t\022&\n\"_PRE_EMPTION_VULNERABILITY_EN"
      "ABLED\020\000\022\'\n#_PRE_EMPTION_VULNERABILITY_DI"
      "SABLED\020\001\022\"\n\036_PRE_EMPTION_VULNERABILITY_M"
      "AX\020\002\"\206\001\n\030pre_emption_capability_t\022#\n\037_PR"
      "E_EMPTION_CAPABILITY_ENABLED\020\000\022$\n _PRE_E"
      "MPTION_CAPABILITY_DISABLED\020\001\022\037\n\033_PRE_EMP"
      "TION_CAPABILITY_MAX\020\00227\n\004Test\022/\n\017Locatio"
      "n_update\022\r.test.Request\032\013.test.Reply\"\000b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1766);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_test_2eproto
namespace test {
const ::google::protobuf::EnumDescriptor* Reply_Base_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[0];
}
bool Reply_Base_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_Base Reply::DIAMETER_SUCCESS;
const Reply_Base Reply::Base_MIN;
const Reply_Base Reply::Base_MAX;
const int Reply::Base_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_subscriber_status_t_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[1];
}
bool Reply_subscriber_status_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_subscriber_status_t Reply::SS_SERVICE_GRANTED;
const Reply_subscriber_status_t Reply::SS_OPERATOR_DETERMINED_BARRING;
const Reply_subscriber_status_t Reply::SS_MAX;
const Reply_subscriber_status_t Reply::subscriber_status_t_MIN;
const Reply_subscriber_status_t Reply::subscriber_status_t_MAX;
const int Reply::subscriber_status_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_access_mode_t_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[2];
}
bool Reply_access_mode_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_access_mode_t Reply::NAM_PACKET_AND_CIRCUIT;
const Reply_access_mode_t Reply::NAM_RESERVED;
const Reply_access_mode_t Reply::NAM_ONLY_PACKET;
const Reply_access_mode_t Reply::NAM_MAX;
const Reply_access_mode_t Reply::access_mode_t_MIN;
const Reply_access_mode_t Reply::access_mode_t_MAX;
const int Reply::access_mode_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_all_apn_conf_ind_t_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[3];
}
bool Reply_all_apn_conf_ind_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_all_apn_conf_ind_t Reply::ALL_APN_CONFIGURATIONS_INCLUDED;
const Reply_all_apn_conf_ind_t Reply::MODIFIED_ADDED_APN_CONFIGURATIONS_INCLUDED;
const Reply_all_apn_conf_ind_t Reply::ALL_APN_MAX;
const Reply_all_apn_conf_ind_t Reply::all_apn_conf_ind_t_MIN;
const Reply_all_apn_conf_ind_t Reply::all_apn_conf_ind_t_MAX;
const int Reply::all_apn_conf_ind_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_pdn_type_t_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[4];
}
bool Reply_pdn_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_pdn_type_t Reply::IPv4;
const Reply_pdn_type_t Reply::IPv6;
const Reply_pdn_type_t Reply::IPv4_AND_v6;
const Reply_pdn_type_t Reply::IPv4_OR_v6;
const Reply_pdn_type_t Reply::IP_MAX;
const Reply_pdn_type_t Reply::pdn_type_t_MIN;
const Reply_pdn_type_t Reply::pdn_type_t_MAX;
const int Reply::pdn_type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_pre_emption_vulnerability_t_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[5];
}
bool Reply_pre_emption_vulnerability_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_pre_emption_vulnerability_t Reply::_PRE_EMPTION_VULNERABILITY_ENABLED;
const Reply_pre_emption_vulnerability_t Reply::_PRE_EMPTION_VULNERABILITY_DISABLED;
const Reply_pre_emption_vulnerability_t Reply::_PRE_EMPTION_VULNERABILITY_MAX;
const Reply_pre_emption_vulnerability_t Reply::pre_emption_vulnerability_t_MIN;
const Reply_pre_emption_vulnerability_t Reply::pre_emption_vulnerability_t_MAX;
const int Reply::pre_emption_vulnerability_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_pre_emption_capability_t_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[6];
}
bool Reply_pre_emption_capability_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_pre_emption_capability_t Reply::_PRE_EMPTION_CAPABILITY_ENABLED;
const Reply_pre_emption_capability_t Reply::_PRE_EMPTION_CAPABILITY_DISABLED;
const Reply_pre_emption_capability_t Reply::_PRE_EMPTION_CAPABILITY_MAX;
const Reply_pre_emption_capability_t Reply::pre_emption_capability_t_MIN;
const Reply_pre_emption_capability_t Reply::pre_emption_capability_t_MAX;
const int Reply::pre_emption_capability_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kImsiFieldNumber;
const int Request::kMccDigit1FieldNumber;
const int Request::kMccDigit2FieldNumber;
const int Request::kMccDigit3FieldNumber;
const int Request::kMncDigit1FieldNumber;
const int Request::kMncDigit2FieldNumber;
const int Request::kMncDigit3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_test_2eproto::InitDefaultsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imsi().size() > 0) {
    imsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imsi_);
  }
  ::memcpy(&mcc_digit1_, &from.mcc_digit1_,
    static_cast<size_t>(reinterpret_cast<char*>(&mnc_digit3_) -
    reinterpret_cast<char*>(&mcc_digit1_)) + sizeof(mnc_digit3_));
  // @@protoc_insertion_point(copy_constructor:test.Request)
}

void Request::SharedCtor() {
  imsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mcc_digit1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mnc_digit3_) -
      reinterpret_cast<char*>(&mcc_digit1_)) + sizeof(mnc_digit3_));
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:test.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  imsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::protobuf_test_2eproto::InitDefaultsRequest();
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mcc_digit1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mnc_digit3_) -
      reinterpret_cast<char*>(&mcc_digit1_)) + sizeof(mnc_digit3_));
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string imsi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imsi().data(), static_cast<int>(this->imsi().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.Request.imsi"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcc_digit1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcc_digit1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcc_digit2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcc_digit2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcc_digit3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcc_digit3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mnc_digit1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnc_digit1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mnc_digit2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnc_digit2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mnc_digit3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnc_digit3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imsi = 1;
  if (this->imsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imsi().data(), static_cast<int>(this->imsi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Request.imsi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imsi(), output);
  }

  // uint32 mcc_digit1 = 2;
  if (this->mcc_digit1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcc_digit1(), output);
  }

  // uint32 mcc_digit2 = 3;
  if (this->mcc_digit2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcc_digit2(), output);
  }

  // uint32 mcc_digit3 = 4;
  if (this->mcc_digit3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mcc_digit3(), output);
  }

  // uint32 mnc_digit1 = 5;
  if (this->mnc_digit1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mnc_digit1(), output);
  }

  // uint32 mnc_digit2 = 6;
  if (this->mnc_digit2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mnc_digit2(), output);
  }

  // uint32 mnc_digit3 = 7;
  if (this->mnc_digit3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mnc_digit3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imsi = 1;
  if (this->imsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imsi().data(), static_cast<int>(this->imsi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Request.imsi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imsi(), target);
  }

  // uint32 mcc_digit1 = 2;
  if (this->mcc_digit1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcc_digit1(), target);
  }

  // uint32 mcc_digit2 = 3;
  if (this->mcc_digit2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcc_digit2(), target);
  }

  // uint32 mcc_digit3 = 4;
  if (this->mcc_digit3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mcc_digit3(), target);
  }

  // uint32 mnc_digit1 = 5;
  if (this->mnc_digit1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mnc_digit1(), target);
  }

  // uint32 mnc_digit2 = 6;
  if (this->mnc_digit2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mnc_digit2(), target);
  }

  // uint32 mnc_digit3 = 7;
  if (this->mnc_digit3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mnc_digit3(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string imsi = 1;
  if (this->imsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imsi());
  }

  // uint32 mcc_digit1 = 2;
  if (this->mcc_digit1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcc_digit1());
  }

  // uint32 mcc_digit2 = 3;
  if (this->mcc_digit2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcc_digit2());
  }

  // uint32 mcc_digit3 = 4;
  if (this->mcc_digit3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcc_digit3());
  }

  // uint32 mnc_digit1 = 5;
  if (this->mnc_digit1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mnc_digit1());
  }

  // uint32 mnc_digit2 = 6;
  if (this->mnc_digit2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mnc_digit2());
  }

  // uint32 mnc_digit3 = 7;
  if (this->mnc_digit3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mnc_digit3());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imsi().size() > 0) {

    imsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imsi_);
  }
  if (from.mcc_digit1() != 0) {
    set_mcc_digit1(from.mcc_digit1());
  }
  if (from.mcc_digit2() != 0) {
    set_mcc_digit2(from.mcc_digit2());
  }
  if (from.mcc_digit3() != 0) {
    set_mcc_digit3(from.mcc_digit3());
  }
  if (from.mnc_digit1() != 0) {
    set_mnc_digit1(from.mnc_digit1());
  }
  if (from.mnc_digit2() != 0) {
    set_mnc_digit2(from.mnc_digit2());
  }
  if (from.mnc_digit3() != 0) {
    set_mnc_digit3(from.mnc_digit3());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  imsi_.Swap(&other->imsi_);
  swap(mcc_digit1_, other->mcc_digit1_);
  swap(mcc_digit2_, other->mcc_digit2_);
  swap(mcc_digit3_, other->mcc_digit3_);
  swap(mnc_digit1_, other->mnc_digit1_);
  swap(mnc_digit2_, other->mnc_digit2_);
  swap(mnc_digit3_, other->mnc_digit3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Reply_ambr_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply_ambr_t::kBrUlFieldNumber;
const int Reply_ambr_t::kBrDlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply_ambr_t::Reply_ambr_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_test_2eproto::InitDefaultsReply_ambr_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Reply.ambr_t)
}
Reply_ambr_t::Reply_ambr_t(const Reply_ambr_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&br_ul_, &from.br_ul_,
    static_cast<size_t>(reinterpret_cast<char*>(&br_dl_) -
    reinterpret_cast<char*>(&br_ul_)) + sizeof(br_dl_));
  // @@protoc_insertion_point(copy_constructor:test.Reply.ambr_t)
}

void Reply_ambr_t::SharedCtor() {
  ::memset(&br_ul_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_dl_) -
      reinterpret_cast<char*>(&br_ul_)) + sizeof(br_dl_));
  _cached_size_ = 0;
}

Reply_ambr_t::~Reply_ambr_t() {
  // @@protoc_insertion_point(destructor:test.Reply.ambr_t)
  SharedDtor();
}

void Reply_ambr_t::SharedDtor() {
}

void Reply_ambr_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_ambr_t::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reply_ambr_t& Reply_ambr_t::default_instance() {
  ::protobuf_test_2eproto::InitDefaultsReply_ambr_t();
  return *internal_default_instance();
}


void Reply_ambr_t::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Reply.ambr_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&br_ul_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_dl_) -
      reinterpret_cast<char*>(&br_ul_)) + sizeof(br_dl_));
  _internal_metadata_.Clear();
}

bool Reply_ambr_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Reply.ambr_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 br_ul = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &br_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 br_dl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &br_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Reply.ambr_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Reply.ambr_t)
  return false;
#undef DO_
}

void Reply_ambr_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Reply.ambr_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 br_ul = 1;
  if (this->br_ul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->br_ul(), output);
  }

  // uint64 br_dl = 2;
  if (this->br_dl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->br_dl(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Reply.ambr_t)
}

::google::protobuf::uint8* Reply_ambr_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.Reply.ambr_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 br_ul = 1;
  if (this->br_ul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->br_ul(), target);
  }

  // uint64 br_dl = 2;
  if (this->br_dl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->br_dl(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Reply.ambr_t)
  return target;
}

size_t Reply_ambr_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Reply.ambr_t)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 br_ul = 1;
  if (this->br_ul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->br_ul());
  }

  // uint64 br_dl = 2;
  if (this->br_dl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->br_dl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_ambr_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Reply.ambr_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply_ambr_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply_ambr_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Reply.ambr_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Reply.ambr_t)
    MergeFrom(*source);
  }
}

void Reply_ambr_t::MergeFrom(const Reply_ambr_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Reply.ambr_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.br_ul() != 0) {
    set_br_ul(from.br_ul());
  }
  if (from.br_dl() != 0) {
    set_br_dl(from.br_dl());
  }
}

void Reply_ambr_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Reply.ambr_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_ambr_t::CopyFrom(const Reply_ambr_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Reply.ambr_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_ambr_t::IsInitialized() const {
  return true;
}

void Reply_ambr_t::Swap(Reply_ambr_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply_ambr_t::InternalSwap(Reply_ambr_t* other) {
  using std::swap;
  swap(br_ul_, other->br_ul_);
  swap(br_dl_, other->br_dl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply_ambr_t::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::test::_Reply_default_instance_._instance.get_mutable()->subscribed_ambr_ = const_cast< ::test::Reply_ambr_t*>(
      ::test::Reply_ambr_t::internal_default_instance());
  ::test::_Reply_default_instance_._instance.get_mutable()->ambr_ = const_cast< ::test::Reply_ambr_t*>(
      ::test::Reply_ambr_t::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kPresentFieldNumber;
const int Reply::kBaseFieldNumber;
const int Reply::kImsiFieldNumber;
const int Reply::kSubscriberStatusFieldNumber;
const int Reply::kAccessRestrictionFieldNumber;
const int Reply::kSubscribedAmbrFieldNumber;
const int Reply::kMsisdnFieldNumber;
const int Reply::kMsisdnLengthFieldNumber;
const int Reply::kRauTauTimerFieldNumber;
const int Reply::kAccessModeFieldNumber;
const int Reply::kContextIdentifierFieldNumber;
const int Reply::kAllApnConfIndFieldNumber;
const int Reply::kNbApnsFieldNumber;
const int Reply::kApnContextIdentifierFieldNumber;
const int Reply::kNbIpAddressFieldNumber;
const int Reply::kPdnTypeFieldNumber;
const int Reply::kServiceSelectionFieldNumber;
const int Reply::kServiceSelectionLengthFieldNumber;
const int Reply::kQciFieldNumber;
const int Reply::kPriorityLevelFieldNumber;
const int Reply::kPreEmpVulnerabilityFieldNumber;
const int Reply::kPreEmpCapabilityFieldNumber;
const int Reply::kAmbrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_test_2eproto::InitDefaultsReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Reply)
}
Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imsi().size() > 0) {
    imsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imsi_);
  }
  msisdn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msisdn().size() > 0) {
    msisdn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msisdn_);
  }
  service_selection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_selection().size() > 0) {
    service_selection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_selection_);
  }
  if (from.has_subscribed_ambr()) {
    subscribed_ambr_ = new ::test::Reply_ambr_t(*from.subscribed_ambr_);
  } else {
    subscribed_ambr_ = NULL;
  }
  if (from.has_ambr()) {
    ambr_ = new ::test::Reply_ambr_t(*from.ambr_);
  } else {
    ambr_ = NULL;
  }
  ::memcpy(&present_, &from.present_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_emp_capability_) -
    reinterpret_cast<char*>(&present_)) + sizeof(pre_emp_capability_));
  // @@protoc_insertion_point(copy_constructor:test.Reply)
}

void Reply::SharedCtor() {
  imsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msisdn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_selection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&subscribed_ambr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_emp_capability_) -
      reinterpret_cast<char*>(&subscribed_ambr_)) + sizeof(pre_emp_capability_));
  _cached_size_ = 0;
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:test.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  imsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msisdn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_selection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subscribed_ambr_;
  if (this != internal_default_instance()) delete ambr_;
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reply& Reply::default_instance() {
  ::protobuf_test_2eproto::InitDefaultsReply();
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msisdn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_selection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && subscribed_ambr_ != NULL) {
    delete subscribed_ambr_;
  }
  subscribed_ambr_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambr_ != NULL) {
    delete ambr_;
  }
  ambr_ = NULL;
  ::memset(&present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_emp_capability_) -
      reinterpret_cast<char*>(&present_)) + sizeof(pre_emp_capability_));
  _internal_metadata_.Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 present = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.Base base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base(static_cast< ::test::Reply_Base >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imsi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imsi().data(), static_cast<int>(this->imsi().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.Reply.imsi"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.subscriber_status_t subscriber_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subscriber_status(static_cast< ::test::Reply_subscriber_status_t >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 access_restriction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_restriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.ambr_t subscribed_ambr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribed_ambr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msisdn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msisdn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msisdn_length = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msisdn_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rau_tau_timer = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rau_tau_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.access_mode_t access_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_mode(static_cast< ::test::Reply_access_mode_t >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 context_identifier = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.all_apn_conf_ind_t all_apn_conf_ind = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_all_apn_conf_ind(static_cast< ::test::Reply_all_apn_conf_ind_t >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nb_apns = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nb_apns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 apn_context_identifier = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apn_context_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nb_ip_address = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nb_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.pdn_type_t pdn_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pdn_type(static_cast< ::test::Reply_pdn_type_t >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_selection = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_selection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_selection().data(), static_cast<int>(this->service_selection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.Reply.service_selection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 service_selection_length = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_selection_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 qci = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qci_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 priority_level = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.pre_emption_vulnerability_t pre_emp_vulnerability = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pre_emp_vulnerability(static_cast< ::test::Reply_pre_emption_vulnerability_t >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.pre_emption_capability_t pre_emp_capability = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pre_emp_capability(static_cast< ::test::Reply_pre_emption_capability_t >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .test.Reply.ambr_t ambr = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 present = 1;
  if (this->present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->present(), output);
  }

  // .test.Reply.Base base = 2;
  if (this->base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->base(), output);
  }

  // string imsi = 3;
  if (this->imsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imsi().data(), static_cast<int>(this->imsi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Reply.imsi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imsi(), output);
  }

  // .test.Reply.subscriber_status_t subscriber_status = 4;
  if (this->subscriber_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->subscriber_status(), output);
  }

  // uint32 access_restriction = 5;
  if (this->access_restriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->access_restriction(), output);
  }

  // .test.Reply.ambr_t subscribed_ambr = 6;
  if (this->has_subscribed_ambr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *subscribed_ambr_, output);
  }

  // bytes msisdn = 7;
  if (this->msisdn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->msisdn(), output);
  }

  // uint32 msisdn_length = 8;
  if (this->msisdn_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msisdn_length(), output);
  }

  // uint32 rau_tau_timer = 9;
  if (this->rau_tau_timer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rau_tau_timer(), output);
  }

  // .test.Reply.access_mode_t access_mode = 10;
  if (this->access_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->access_mode(), output);
  }

  // uint32 context_identifier = 11;
  if (this->context_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->context_identifier(), output);
  }

  // .test.Reply.all_apn_conf_ind_t all_apn_conf_ind = 12;
  if (this->all_apn_conf_ind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->all_apn_conf_ind(), output);
  }

  // uint32 nb_apns = 13;
  if (this->nb_apns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nb_apns(), output);
  }

  // uint32 apn_context_identifier = 14;
  if (this->apn_context_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->apn_context_identifier(), output);
  }

  // uint32 nb_ip_address = 15;
  if (this->nb_ip_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->nb_ip_address(), output);
  }

  // .test.Reply.pdn_type_t pdn_type = 16;
  if (this->pdn_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->pdn_type(), output);
  }

  // string service_selection = 17;
  if (this->service_selection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_selection().data(), static_cast<int>(this->service_selection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Reply.service_selection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->service_selection(), output);
  }

  // int32 service_selection_length = 18;
  if (this->service_selection_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->service_selection_length(), output);
  }

  // uint32 qci = 19;
  if (this->qci() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->qci(), output);
  }

  // uint32 priority_level = 20;
  if (this->priority_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->priority_level(), output);
  }

  // .test.Reply.pre_emption_vulnerability_t pre_emp_vulnerability = 21;
  if (this->pre_emp_vulnerability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->pre_emp_vulnerability(), output);
  }

  // .test.Reply.pre_emption_capability_t pre_emp_capability = 22;
  if (this->pre_emp_capability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->pre_emp_capability(), output);
  }

  // .test.Reply.ambr_t ambr = 23;
  if (this->has_ambr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *ambr_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Reply)
}

::google::protobuf::uint8* Reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 present = 1;
  if (this->present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->present(), target);
  }

  // .test.Reply.Base base = 2;
  if (this->base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->base(), target);
  }

  // string imsi = 3;
  if (this->imsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imsi().data(), static_cast<int>(this->imsi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Reply.imsi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imsi(), target);
  }

  // .test.Reply.subscriber_status_t subscriber_status = 4;
  if (this->subscriber_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->subscriber_status(), target);
  }

  // uint32 access_restriction = 5;
  if (this->access_restriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->access_restriction(), target);
  }

  // .test.Reply.ambr_t subscribed_ambr = 6;
  if (this->has_subscribed_ambr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *subscribed_ambr_, deterministic, target);
  }

  // bytes msisdn = 7;
  if (this->msisdn().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->msisdn(), target);
  }

  // uint32 msisdn_length = 8;
  if (this->msisdn_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->msisdn_length(), target);
  }

  // uint32 rau_tau_timer = 9;
  if (this->rau_tau_timer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rau_tau_timer(), target);
  }

  // .test.Reply.access_mode_t access_mode = 10;
  if (this->access_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->access_mode(), target);
  }

  // uint32 context_identifier = 11;
  if (this->context_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->context_identifier(), target);
  }

  // .test.Reply.all_apn_conf_ind_t all_apn_conf_ind = 12;
  if (this->all_apn_conf_ind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->all_apn_conf_ind(), target);
  }

  // uint32 nb_apns = 13;
  if (this->nb_apns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nb_apns(), target);
  }

  // uint32 apn_context_identifier = 14;
  if (this->apn_context_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->apn_context_identifier(), target);
  }

  // uint32 nb_ip_address = 15;
  if (this->nb_ip_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->nb_ip_address(), target);
  }

  // .test.Reply.pdn_type_t pdn_type = 16;
  if (this->pdn_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->pdn_type(), target);
  }

  // string service_selection = 17;
  if (this->service_selection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_selection().data(), static_cast<int>(this->service_selection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Reply.service_selection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->service_selection(), target);
  }

  // int32 service_selection_length = 18;
  if (this->service_selection_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->service_selection_length(), target);
  }

  // uint32 qci = 19;
  if (this->qci() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->qci(), target);
  }

  // uint32 priority_level = 20;
  if (this->priority_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->priority_level(), target);
  }

  // .test.Reply.pre_emption_vulnerability_t pre_emp_vulnerability = 21;
  if (this->pre_emp_vulnerability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->pre_emp_vulnerability(), target);
  }

  // .test.Reply.pre_emption_capability_t pre_emp_capability = 22;
  if (this->pre_emp_capability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->pre_emp_capability(), target);
  }

  // .test.Reply.ambr_t ambr = 23;
  if (this->has_ambr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, *ambr_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string imsi = 3;
  if (this->imsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imsi());
  }

  // bytes msisdn = 7;
  if (this->msisdn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msisdn());
  }

  // string service_selection = 17;
  if (this->service_selection().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_selection());
  }

  // .test.Reply.ambr_t subscribed_ambr = 6;
  if (this->has_subscribed_ambr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *subscribed_ambr_);
  }

  // .test.Reply.ambr_t ambr = 23;
  if (this->has_ambr()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ambr_);
  }

  // uint32 present = 1;
  if (this->present() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->present());
  }

  // .test.Reply.Base base = 2;
  if (this->base() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->base());
  }

  // .test.Reply.subscriber_status_t subscriber_status = 4;
  if (this->subscriber_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscriber_status());
  }

  // uint32 access_restriction = 5;
  if (this->access_restriction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->access_restriction());
  }

  // uint32 msisdn_length = 8;
  if (this->msisdn_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msisdn_length());
  }

  // uint32 rau_tau_timer = 9;
  if (this->rau_tau_timer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rau_tau_timer());
  }

  // .test.Reply.access_mode_t access_mode = 10;
  if (this->access_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_mode());
  }

  // uint32 context_identifier = 11;
  if (this->context_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->context_identifier());
  }

  // .test.Reply.all_apn_conf_ind_t all_apn_conf_ind = 12;
  if (this->all_apn_conf_ind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->all_apn_conf_ind());
  }

  // uint32 nb_apns = 13;
  if (this->nb_apns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nb_apns());
  }

  // uint32 apn_context_identifier = 14;
  if (this->apn_context_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->apn_context_identifier());
  }

  // uint32 nb_ip_address = 15;
  if (this->nb_ip_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nb_ip_address());
  }

  // .test.Reply.pdn_type_t pdn_type = 16;
  if (this->pdn_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pdn_type());
  }

  // int32 service_selection_length = 18;
  if (this->service_selection_length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_selection_length());
  }

  // uint32 qci = 19;
  if (this->qci() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qci());
  }

  // uint32 priority_level = 20;
  if (this->priority_level() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority_level());
  }

  // .test.Reply.pre_emption_vulnerability_t pre_emp_vulnerability = 21;
  if (this->pre_emp_vulnerability() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pre_emp_vulnerability());
  }

  // .test.Reply.pre_emption_capability_t pre_emp_capability = 22;
  if (this->pre_emp_capability() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pre_emp_capability());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imsi().size() > 0) {

    imsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imsi_);
  }
  if (from.msisdn().size() > 0) {

    msisdn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msisdn_);
  }
  if (from.service_selection().size() > 0) {

    service_selection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_selection_);
  }
  if (from.has_subscribed_ambr()) {
    mutable_subscribed_ambr()->::test::Reply_ambr_t::MergeFrom(from.subscribed_ambr());
  }
  if (from.has_ambr()) {
    mutable_ambr()->::test::Reply_ambr_t::MergeFrom(from.ambr());
  }
  if (from.present() != 0) {
    set_present(from.present());
  }
  if (from.base() != 0) {
    set_base(from.base());
  }
  if (from.subscriber_status() != 0) {
    set_subscriber_status(from.subscriber_status());
  }
  if (from.access_restriction() != 0) {
    set_access_restriction(from.access_restriction());
  }
  if (from.msisdn_length() != 0) {
    set_msisdn_length(from.msisdn_length());
  }
  if (from.rau_tau_timer() != 0) {
    set_rau_tau_timer(from.rau_tau_timer());
  }
  if (from.access_mode() != 0) {
    set_access_mode(from.access_mode());
  }
  if (from.context_identifier() != 0) {
    set_context_identifier(from.context_identifier());
  }
  if (from.all_apn_conf_ind() != 0) {
    set_all_apn_conf_ind(from.all_apn_conf_ind());
  }
  if (from.nb_apns() != 0) {
    set_nb_apns(from.nb_apns());
  }
  if (from.apn_context_identifier() != 0) {
    set_apn_context_identifier(from.apn_context_identifier());
  }
  if (from.nb_ip_address() != 0) {
    set_nb_ip_address(from.nb_ip_address());
  }
  if (from.pdn_type() != 0) {
    set_pdn_type(from.pdn_type());
  }
  if (from.service_selection_length() != 0) {
    set_service_selection_length(from.service_selection_length());
  }
  if (from.qci() != 0) {
    set_qci(from.qci());
  }
  if (from.priority_level() != 0) {
    set_priority_level(from.priority_level());
  }
  if (from.pre_emp_vulnerability() != 0) {
    set_pre_emp_vulnerability(from.pre_emp_vulnerability());
  }
  if (from.pre_emp_capability() != 0) {
    set_pre_emp_capability(from.pre_emp_capability());
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  using std::swap;
  imsi_.Swap(&other->imsi_);
  msisdn_.Swap(&other->msisdn_);
  service_selection_.Swap(&other->service_selection_);
  swap(subscribed_ambr_, other->subscribed_ambr_);
  swap(ambr_, other->ambr_);
  swap(present_, other->present_);
  swap(base_, other->base_);
  swap(subscriber_status_, other->subscriber_status_);
  swap(access_restriction_, other->access_restriction_);
  swap(msisdn_length_, other->msisdn_length_);
  swap(rau_tau_timer_, other->rau_tau_timer_);
  swap(access_mode_, other->access_mode_);
  swap(context_identifier_, other->context_identifier_);
  swap(all_apn_conf_ind_, other->all_apn_conf_ind_);
  swap(nb_apns_, other->nb_apns_);
  swap(apn_context_identifier_, other->apn_context_identifier_);
  swap(nb_ip_address_, other->nb_ip_address_);
  swap(pdn_type_, other->pdn_type_);
  swap(service_selection_length_, other->service_selection_length_);
  swap(qci_, other->qci_);
  swap(priority_level_, other->priority_level_);
  swap(pre_emp_vulnerability_, other->pre_emp_vulnerability_);
  swap(pre_emp_capability_, other->pre_emp_capability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::test::Request* Arena::Create< ::test::Request >(Arena* arena) {
  return Arena::CreateInternal< ::test::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::test::Reply_ambr_t* Arena::Create< ::test::Reply_ambr_t >(Arena* arena) {
  return Arena::CreateInternal< ::test::Reply_ambr_t >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::test::Reply* Arena::Create< ::test::Reply >(Arena* arena) {
  return Arena::CreateInternal< ::test::Reply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
